
Guide to a successful project - Building an automated test framework
Objective is to build an automated test framework, namely a tool able to build and run automated tests (e.g., end-to-end tests)
Hard requirements:
- The framework includes features able to interact with a given WebApp.
- This is the side to be tested: Vulnerable Web App (app-web-berlin42-50e7ace7d4d7.herokuapp.com)
Please mind the following steps for the project completion:
1. Define among your team members the technology you would like to use (Playwright vs Cypress).
We suggest that you choose from any of these two tools to build the testing framework:
Playwright: https://playwright.dev/ 
(supported by many programming languages such as Nodejs, Python, .NET and Java)
Cypress: https://www.cypress.io/ 
(only supported by JavaScript)
2. Install the tool and get ready all the environment you might need to get ready with coding. Please reach out in case of issues!
2.a) Implement low level actions such as:
- Klick at specific button (make_click_in_button_with_name_equal(“Submit”))
- Go to specific URL
- Validate that specific text is at the page available 
- Add text at textbox 

2.b) Test cases depend upon the web subject to testing. Please define a minimum of two test cases to be in next steps implemented. 
For steps 1 and 2, we highly recommend that the team takes no more than one week to complete them. In case of specific issues 
please do not hesitate to reach out. Said differently, steps 1 and 2 are expected to be completed within the first week of the project. 
3. Please implement the defined test cases in the previous step for this we recommend taking no longer that one week, this is the 
second week of the project. 
4. Now please implement “business level actions”, i.e. re-implement the test cases of point 3 via business level actions. For this 
point, we recommend again taking no more than one week (we are now in the third week). Soon you and your team will be 
presenting this great project in front of an audience at the Bayer Berlin and the clock is ticking ;)
5. For the fourth and last week, we would love you and your team to carefully prepare the showcase and presentation of your 
work so that you all shine at the Bayer Campus during the Berlin 42, Bayer Challenges event.
Extended goals & suggestions:
- The tool generates a report after each execution, i.e., details about which tests passed, which failed, error description, etc. 
- Build a simple API to store these results so that you can observe and analyze trends concerning the tests execution.
Hint: It needs to parse the test results file and store them in a database, it could also be allocated in a memory DB for the sake 
of POC or a DynamoDB in case it is desired to experiment with the cloud